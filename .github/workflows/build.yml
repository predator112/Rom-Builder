name: Rom-Builder
on: 
  workflow_dispatch:
  push:
defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Sync Rom..
      uses: NFS86/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        user: ${{ secrets.USERNAME }}
        pass: ${{ secrets.PASSWORD }}
        command: |
          my_dir="$HOME"
          device=rosy
          mkdir -p $my_dir/script/$device
          cd $my_dir/script/$device
          rm -rf *
          wget https://raw.githubusercontent.com/NFS86/Rom-Builder/master/build.sh
          rom_name="$(grep init $my_dir/script/$device/build.sh -m 1 | cut -d / -f 4)"
          command="$(head $my_dir/script/$device/build.sh -n $(expr $(grep '# build rom' $my_dir/script/$device/build.sh -n | cut -f1 -d:) - 1))"
          only_sync=$(grep 'repo sync' $my_dir/script/$device/build.sh)
          mkdir -p $my_dir/$rom_name
          cd $my_dir/$rom_name
          rm -rf .repo/local_manifests
          rm -rf sync.log
          bash -c "$command" |& tee -a $HOME/$rom_name/sync.log || true
          a=$(grep 'Cannot remove project' sync.log -m1|| true)
          b=$(grep "^fatal: remove-project element specifies non-existent project" sync.log -m1 || true)
          c=$(grep 'repo sync has finished successfully.' sync.log -m1 || true)
          d=$(grep 'Failing repos:' sync.log -n -m1 || true)
          e=$(grep 'error: Unable to fully sync the tree.' sync.log || true)
          if [[ $a == 'Cannot remove project' ]]
          then
          a=$(echo $a | cut -d ':' -f2)
          rm -rf $a
          repo sync -c --no-clone-bundle --no-tags --optimized-fetch --prune --force-sync -j4
          elif [[ $b == 'remove-project element specifies non-existent' ]]
          then  exit 1
          elif [[ $c == 'repo sync has finished successfully.' ]]
          then true
          elif [[ $d == 'Failing repos:' ]]
          then
          d=$(expr $(grep 'Failing repos:' sync.log -n -m 1| cut -d ':' -f1) + 1)
          d2=$(expr $(grep 'Try re-running' sync.log -n -m1 | cut -d ':' -f1) - 1 )
          rm -rf $(head -n $d2 sync.log | tail -n +$d)
          repo sync -c --no-clone-bundle --no-tags --optimized-fetch --prune --force-sync -j4
          elif [[ $e == 'error: Unable to fully sync the tree.' ]]
          then
          rm -rf $(grep 'error: Unable to fully sync the tree.' sync.log | cut -d ':' -f2 | cut -d "'" -f2)
          repo sync -c --no-clone-bundle --no-tags --optimized-fetch --prune --force-sync -j4
          else
          exit 1
          fi
          rm -rf sync.log

    - name: Building Rom..
      uses: NFS86/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        user: ${{ secrets.USERNAME }}
        pass: ${{ secrets.PASSWORD }}
        args: "-tt"
        command: |
          export my_dir="$HOME"
          export device=rosy
          export rom_name="$(grep init $my_dir/script/$device/build.sh -m 1 | cut -d / -f 4)"
          export command="$(tail $my_dir/script/$device/build.sh -n +$(expr $(grep 'build/envsetup.sh' $my_dir/script/$device/build.sh -n | cut -f1 -d:) - 1)| head -n -1 | grep -v '# end')"
          export rel_date="$(date "+%Y%m%d")"
          cd $my_dir/$rom_name
          export CCACHE_EXEC=/usr/bin/ccache
          export USE_CCACHE=1
          ccache -o compression=true
          ccache -o compression_level=1
          ccache -o max_size=150G
          ccache -z
          bash -c "$command" |& tee -a $HOME/$rom_name/build.log || true
          a=$(grep 'FAILED:' build.log -m1 || true)
          if [[ $a == *'FAILED:'* ]]
          then
          curl -s -X POST "https://api.telegram.org/bot${tg_token}/sendMessage" -d chat_id="${tg_id}" -d "disable_web_page_preview=true" -d "parse_mode=html" -d text="<code>$device Build $rom_name</code> <b>Error.</b>[❌]"
          curl -F document=@build.log "https://api.telegram.org/bot${tg_token}/sendDocument" -F chat_id="${tg_id}" -F "disable_web_page_preview=true" -F "parse_mode=html"
          rm -rf build.log
          exit 1
          fi
          rm -rf build.log

    - name: Upload Rom..
      uses: NFS86/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        user: ${{ secrets.USERNAME }}
        pass: ${{ secrets.PASSWORD }}
        command: |
          export my_dir="$HOME"
          export device=rosy
          export rom_name="$(grep init $my_dir/script/$device/build.sh -m 1 | cut -d / -f 4)"
          export rel_date="$(date "+%Y%m%d")"
          export output="out/target/product/$device/*$rel_date*.zip"
          export ota="out/target/product/$device/*ota*.zip"
          cd $my_dir/$rom_name
          rclone copy --drive-chunk-size 256M --stats 1s $output NFS86:$device/$rom_name -P

    - name: Send notif..
      uses: NFS86/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        user: ${{ secrets.USERNAME }}
        pass: ${{ secrets.PASSWORD }}
        args: "-tt"
        command: |
          export my_dir="$HOME"
          export device=rosy
          export rom_name="$(grep init $my_dir/script/$device/build.sh -m 1 | cut -d / -f 4)"
          export rel_date="$(date "+%Y%m%d")"
          export output="out/target/product/$device/*$rel_date*.zip"
          export ota="out/target/product/$device/*ota*.zip"
          cd $my_dir/$rom_name
          curl -s -X POST "https://api.telegram.org/bot${tg_token}/sendMessage" -d chat_id="${tg_id}" -d "disable_web_page_preview=true" -d "parse_mode=html" -d text="<code>Build $rom_name:</code> <b>Succes.</b>[✅]%0A %0A<b>Download link:</b> https://rombuilder.projek.workers.dev/$device/$rom_name/$(cd out/target/product/$device && ls *$rel_date*.zip)"
          rm -rf $my_dir/$rom_name/out/target/product/$device
          cd $my_dir
          rm -rf .repo*
